#!/usr/bin/perl -w

use Data::Dumper; # TODO: remove this at some point
use JSON qw( encode_json );

# george caley presents:
# perl2python
# a COMP2041 assignment

# --== LEXER ==--

# token types
use constant TOKENS => qw(
	COMMENT
	WORD
	SCALAR
	STRING
	NUMBER
	SEMICOLON
	EQUALS DOUBLEEQUALS POINT MATCH
	PARENTHESIS_OPEN PARENTHESIS_CLOSE
	SQUARE_OPEN SQUARE_CLOSE
	CURLY_OPEN CURLY_CLOSE
	COMMA
	PLUS INCREMENT
	MINUS DECREMENT
	MUL POW
	DIV
);

# single char token mappings
# this will hopefully clean up the lexer code a bit
# anything slightly less trivial (e.g. =, which is special because we need to test ==) 
# will need its own code
%singleCharTokens = (
	";" => SEMICOLON,
	"(" => PARENTHESIS_OPEN,
	")" => PARENTHESIS_CLOSE,
	"[" => SQUARE_OPEN,
	"]" => SQUARE_CLOSE,
	"{" => CURLY_OPEN,
	"}" => CURLY_CLOSE,
	"," => COMMA,
	"/" => DIV
);

# tokeniser states
use constant STATES => qw(
	STATE_IDLE
	STATE_COMMENT
	STATE_WORD
	STATE_SCALAR
	STATE_ARRAY
	STATE_HASH
	STATE_STRING
	STATE_NUMBER
);

# tokens are stored as hashes of type and value

sub makeToken {
	my $type = shift;

	my $token = {};
	$token->{"type"} = $type;

	my $value = shift;
	if (defined $value) {
		$token->{"value"} = $value;
	}

	#print "making token ", %$token, "\n";

	return $token;
}

sub tokenise {
	my $data = shift;

	# data is just the text from the python file
	# it's now our job to chop it up into tokens
	# yay......

	# add newline to data (makes detecting the end of the last line easier)
	$data .= "\n";
	my @chars = split(//, $data);

	# initialise state machine
	my $state = STATE_IDLE;

	# initialise token array
	my @tokens = ();

	# here is a string to store token value
	my $value = "";

	# initialise current char counter
	my $i = 0;

	while ($i < @chars) {

		my $curr = $chars[$i]; # current char
		my $next = $chars[$i+1]; # next char

		my $token;

		if ($state eq STATE_IDLE) {
			if (defined $singleCharTokens{$curr}) {
				# use a single char token mapping
				push @tokens, makeToken($singleCharTokens{$curr});
				# remain in the idle state
			} elsif ($curr eq "#") {
				# start reading comment
				$state = STATE_COMMENT;
			} elsif ($curr eq "=") {
				# is it double equals?
				if ($next eq "=") {
					$token = makeToken(DOUBLEEQUALS);
					$i++;
				} elsif ($next eq ">") {
					$token = makeToken(POINT);
					$i++;
				} elsif ($next eq "~") {
					$token = makeToken(MATCH);
					$i++;
				} else {
					$token = makeToken(EQUALS);
				}

				push @tokens, $token;
			} elsif ($curr eq "*") {
				# is it pow?
				if ($next eq "*") {
					$token = makeToken(POW);
					$i++;
				} else {
					$token = makeToken(MUL);
				}

				push @tokens, $token;
			} elsif ($curr eq "+") {
				# is it increment?
				if ($next eq "+") {
					$token = makeToken(INCREMENT);
					$i++;
				} else {
					$token = makeToken(PLUS);
				}

				push @tokens, $token;
			} elsif ($curr eq "-") {
				# is it decrement?
				if ($next eq "-") {
					$token = makeToken(DECREMENT);
					$i++;
				} else {
					$token = makeToken(MINUS);
				}

				push @tokens, $token;
			} elsif ($curr eq '"' || $curr eq "'") {
				# start reading string
				$state = STATE_STRING;
                $separator = $curr;
			} elsif ($curr eq "\$") {
				# start reading scalar
				$state = STATE_SCALAR;
			} elsif ($curr eq "@") {
				# start reading array
				$state = STATE_ARRAY;
			} elsif ($curr eq "%") {
				# start reading hash
				$state = STATE_HASH;
			} elsif ($curr =~ /[A-Za-z_]/) {
				# start reading a word (stuff like keywords, function names, etc.)
				$state = STATE_WORD;
				next;
				#$value .= $curr;
			} elsif ($curr =~ /[0-9]/) {
				# start reading number
				$state = STATE_NUMBER;
				next;
				#$value .= $curr;
			}
		} elsif ($state eq STATE_COMMENT) {
			if ($curr eq "\n") {
				# newline! end of comment
				push @tokens, makeToken(COMMENT, $value);

				$state = STATE_IDLE;
				$value = "";
			} else {
				# consume char
				$value .= $curr;
			}
		} elsif ($state eq STATE_STRING) {
			# keep reading until we hit the end quote
			if ($curr eq $separator) {
				# we're done
				push @tokens, makeToken(STRING, $value);

				$state = STATE_IDLE;
				$value = "";
			} elsif ($curr eq "\\") {
				# is it a backslash followed by a quote?
				if ($next eq $separator) {
                    # consume just the quote
					$value .= $next;
					$i++;
                } elsif ($next eq "\\") {
                    # consume both backslashes
                    $value .= $curr;
                    $value .= $next;
                    $i++;
				} else {
                    # consume it like normal
                    $value .= $curr;
                }
			} else {
				# consume char
				$value .= $curr;
			}
		} elsif ($state eq STATE_SCALAR || $state eq STATE_ARRAY || $state eq STATE_HASH) {
			# consume char
			$value .= $curr;

			# keep reading until we hit something unusual
			if (!($next =~ /[A-Za-z0-9_]/)) {
				# end of name
				if ($state eq STATE_SCALAR) {
					$type = SCALAR;
				} elsif ($state eq STATE_ARRAY) {
					$type = ARRAY;
				} elsif ($state eq STATE_HASH) {
					$type = HASH;
				}

				push @tokens, makeToken($type, $value);

				$state = STATE_IDLE;
				$value = "";
			}
		} elsif ($state eq STATE_WORD) {
			# consume char
			$value .= $curr;

			if (!($next =~ /[A-Za-z0-9_]/)) {
				# end of function name
				push @tokens, makeToken(WORD, $value);

				$state = STATE_IDLE;
				$value = "";
			}
		} elsif ($state eq STATE_NUMBER) {
			# consume char
			$value .= $curr;

			if (!($next =~ /[0-9]/)) {
				# end of number
				push @tokens, makeToken(NUMBER, $value);

				$state = STATE_IDLE;
				$value = "";
			}
		}

		$i++;

	}

	return @tokens;

}

# --== PARSER ==--

use constant AST_NODES => qw(
	NODE_STATEMENTS
	NODE_COMMENT
	NODE_CALL
);

# the parser operates on a few global variables
# the token array and the current token counter
@tokens = ();
$upto = 0;

sub parse {
	my $statements_ref = parse_statements();

	my %node = (
		"type" => NODE_STATEMENTS,
		"children" => $statements_ref
	);

	return \%node;
}

sub parse_statements {
	# parse numerous statements
	# TODO: if/while loops

	my @statements = ();

	while ($upto <= $#tokens) {
		push @statements, parse_statement();
	}

	return \@statements;
}

sub parse_statement {
	# parse a single statement

	# the only thing that exists so far is calls
	my $call_ref = parse_call();

	# consume semicolon
	# om nom nom
	if ($upto <= $#tokens) {
		my %curr = %{$tokens[$upto]};
		($curr{"type"} eq SEMICOLON) or die "Expecting semicolon";
		$upto++;
	}

	return $call_ref;
}

sub parse_call {
	# get the name of the call
	my %curr = %{$tokens[$upto]};
	my $name = $curr{"value"};
	print "parsing call $name\n";
	$upto++;

	# parse arguments
	my $args_ref = parse_args();

	# assemble a node
	my %node = (
		"type" => NODE_CALL,
		"name" => $name,
		"children" => $args_ref
	);

	return \%node;
}

sub parse_args {
	# we'll know we're at the end when we hit either:
	# (1) closing parenthesis (assuming there was an opening one)
	# (2) semicolon

	# initialise array of args
	my @args = ();

	# check for parentheses
	my $parentheses = 0;

	my %curr = %{$tokens[$upto]};
	if ($curr{"type"} eq PARENTHESIS_OPEN) {
		$parentheses = 1;
		$upto++;
	}

	my $first = 1;

	while ($upto <= $#tokens) {
		my %curr = %{$tokens[$upto]};
		my %next;

		if ($upto < $#tokens) {
			%next = %{$tokens[$upto+1]};
		} else {
			undef %next;
		}

		if ($curr{"type"} eq PARENTHESIS_CLOSE) {
			# ...were we expecting it?
			if ($parentheses) {
				# consume the closing parenthesis
				$upto++;
				last;
			} else {
				# end anyway, but don't consume anything
				# nested functions, what even
				last;
			}
		} elsif ($curr{"type"} eq SEMICOLON) {
			# don't actually eat the semicolon, leave that to parse_statement
			last;
		} else {
			# must be an argument
			# if it's not the first arg, we need to consume the comma too
			if (!$first) {
				($curr{"type"} eq COMMA) or die "Expecting comma";
				$upto++;
			}
			
			push @args, parse_arg();
		}

		$first = 0;
	}

	# return the arguments (by reference)
	return \@args;
}

sub parse_arg {
	# wtf is an arg
	#my %curr = %{$tokens[$upto]};
	#print "reading arg ", $curr{"type"}, "\n";

	#print "the fuck is ", $curr{"type"}, "!?\n";
	#die;
	#return $tokens[$upto];
	return parse_expr();
}

sub parse_expr {
	my %curr = %{$tokens[$upto]};

	print "reading expr, starting with ", $curr{"type"}, "\n";

	# is it a call?
	if ($curr{"type"} eq WORD) {
		return parse_call();
	}

	# is it a variable?
	if ($curr{"type"} eq SCALAR) {
		$upto++;
		return \%curr;
	}

	# must be a literal
	$upto++;
	return \%curr;
}

# --== MAIN STUFF ==--

# create list of files from arguments
@files = @ARGV;
# if it's empty, add stdin
if (@ARGV == 0) {
	push @files, "-";
}

foreach $file (@files) {

	open(F, "< $file");

	$data = "";
	while (<F>) {
		$data .= $_;
	}

	# initialise parser shiz
	@tokens = tokenise($data);
	$upto = 0;

	#foreach $token (@tokens) {
	#	print "token: $token ", %{$token}, "\n";
	#}

	$tree_ref = parse();
	print Dumper($tree_ref);
}